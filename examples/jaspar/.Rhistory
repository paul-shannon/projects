warnings
warnings()
option(warn=0)
options(warn=0)
option(warn=2)
options(warn=2)
traceback()
source("go.R"); pwms <- run()
lines
n
n
line.count
line[1]
lines[1]
lines[2]
as.numeric("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21")
as.numeric(strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21"))
as.numeric(strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21"), " ")
as.numeric(strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21", " "))
strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21", " ")
strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21", " *")
strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21", " W+")
strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21", " \W+")
?regex
strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21", "[:blank:]")
?strsplit
?"regular expression"
?`regular expression`
?regex
strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21", " \s+", perl=TRUE)
strsplit("22 16 25 27  0  0 82 40 56 35 65 25 64  0 33 52 45 21", "\\s+", perl=TRUE)
lines[[1]]
lines[1]
source("go.R"); pwms <- run()
n
n
n
lines[[i]]
s <- lines[[i]]
s
source("go.R"); pwms <- run()
n
lines[[1]]
lines[[2]]
s <- lines[[2]]
s.index("0")
charmatch
charmatch("0", s)
s
s <- lines[[2]]
s
x <- lines[[2]]
x
charmatch("0", x)
x
?charmatch
charmatch("m", "mean")
source("go.R"); pwms <- run()
c
x3
strsplit(x3, "\\s+", perl=TRUE)
x3
sub(" *\[", "", fixed=TRUE, x)
sub(" *\[", "", x)
sub(" *\\[", "", x)
    x2 <- sub(" *\\[", "", x)

x2
    x3 <- sub(" *\\] *", "", x2)

x3
strsplit(x3, "\\s+", perl=TRUE)
counts
Q
source("go.R"); pwms <- run()
c
source("go.R"); pwms <- run()
lines
textOfLine
x
Q
n
x
n
x2
n
x3
as.integer(strsplit(x3, "\\s+", perl = TRUE)[[1]])
c
Q
lines[1:5]
uri <- "http://jaspar.genereg.net/html/DOWNLOAD/JASPAR_CORE/pfm/nonredundant/pfm_all.txt";
all.lines[1:5]
text[1:5]
source("go.R"); 
source("go.R"); 
source("go.R"); 
text
n
lines
Q
source("go.R"); 
lines
Q
source("go.R"); 
lines
n
n
title
strsplit(lines[1], "\t")[[1]]
strsplit(lines[1], "\t")[[1]][1]
gsub(">", "", title.raw, fixed=TRUE)
title.raw
gsub(">", "", title.raw, fixed=TRUE)
Q
source("go.R"); runTests()
source("go.R"); runTests()
pwm
source("go.R"); runTests()
PWM
pwm
PWM(pwm$matrix)
colSums(pwm$matrix)
?PWM
q()
source("go.R"); runTests()
pwm
consensusString(pwm)
pwm
consensusString(pwm)
class(pwm)
?consensusString
mdb <- MotifDb
mdb[[1]]
consensusMatrix(pwm)
consensusString(consensusMatrix(pwm))
mdb[[1]]
consensusString(mdb[[1]])
pwm
fivenum(pwm)
fivenum(mdb[[1]])
pcm
pcm <- pcm$matrix
apply(pcm, 2, function(col) col <= col/sum(col))
apply(pcm, 2, function(col) col <- col/sum(col))
pcm
consensusString(pwm)
pwm
pcm
?consensusString
dna
?matchPWM
consensusString(pwm, ambiguityMap=IUPAC_CODE_MAP, threshold=0.5)
consensusString(pwm, ambiguityMap=IUPAC_CODE_MAP, threshold=0.3)
consensusString(pwm, ambiguityMap=IUPAC_CODE_MAP, threshold=0.2)
pwm
pwm
round(pwm, 2)
wdth(180)
round(pwm, 2)
maxScore(pwm)
pcm
source("go.R"); runTests()
all.lines[1:5]
wdth(80)
all.lines[1:5]
pwm
wdth(140)
pwm
pcm
all.lines[1:5]
wdth(80)
all.lines[1:5]
pwm
pwm
apply(pcm, 2, sum)
apply(pcm, 2, sum)
pcm
pwm
matchPWM(pwm, "GTCTGTGGTTT", with.score=TRUE)
matchPWM(pwm, "GTCTGTGGTTT", with.score=TRUE)$score
score(matchPWM(pwm, "GTCTGTGGTTT", with.score=TRUE))
matchPWM(pwm, "GTCTGTGGTTT", with.score=TRUE)
all.lines[1:5]
all.lines[1:5]
ranges(x)
data.frame(ranges(x), score=mcols(x)$score)
source("go.R"); runTests()
source("go.R"); runTests()
tbl
Q
source("go.R"); runTests()
Q
source("go.R"); runTests()
q()
source("go.R"); runTests()
uri
title.line.count
vector(mode=matrix, length=3)
vector(mode=matrix(), length=3)
vector(mode="matrix", length=3)
vector("matrix", 3)
pwms <- list()
pwms[3] <- list(title="sam", mtx =matrix(1:10, nrow=2))
pwms[[3]] <- list(title="sam", mtx =matrix(1:10, nrow=2))
pwms
pwms
wdth(100)
pwms
source("go.R"); runTests()
x
lapply(x, function(e) apply(e$matrix, 2, function(col) col/sum(col)))
wdth(110)
lapply(x, function(e) apply(e$matrix, 2, function(col) col/sum(col)))
names(x[[1]])
pfms
source("go.R"); runTests(); pfms <- run()
length(pfms)
pfms[1:2]
as.matrix(pfms[1:2])
unlist(pfms[1:2]
)
unlist(pfms[1:2], use.names=FALSE)
pfms[4]
names(pfms)[4]
pmfs[[4]]
pfms[[4]]
sequence
pfms[1]
reverseComplement(sequence)
reverseComplement(DNAstring(sequence))
reverseComplement(DNAString(sequence))
as.character(reverseComplement(DNAString(sequence)))
tbl
tbl
tbl
pfms[1]
tbl
tbl.3
tbl.5
tbl.4
args(matchPWM)
min.score = 0.80
min.score.as.string
source("go.R"); runTests()
tbl.3
tbl.4
tbl.5
tbl.fimo
tert.sequences
findHits("CTCGGCCAATCAGAGC", pfms)
grep("MA0060", names(pfms))
pfms[grep("MA0060", names(pfms))]
findHits("CTCGGCCAATCAGAGC", pfms, 0.5)
wdth(240)
pfms[grep("MA0060", names(pfms))]
dim(pfms[[grep("MA0060", names(pfms))]])
requestMatch(fc, list(x="CTCGGCCAATCAGAGC"))
tbl.xyz <- findHits("CTCGGCCAATCAGAGC", pfms, 0.5)
head(tbl.xyz)
tbl.xyz[order(tbl.xyz$score, decreasing=TRUE),]
head(tbl.xyz[order(tbl.xyz$score, decreasing=TRUE),])
requestMatch(fc, list(x="CTCGGCCAATCAGAGC"))
args(matchPWM)
?matchPWM
tbl.xyz <- tbl.xyz[order(tbl.xyz$score, decreasing=TRUE),]
subset(tbl.xyz, motif=="MA0611.1")
source("go.R"); 
hits
c
hits
mcols(hits)
slotNames(hits)
ranges(hits)
hits@elementType
views(hits)
str(hits)
hits@subject
hits@shared
mcols(hits@subject)
hits@subject
hits@elementMetadata
hits@elementMetadata@listData
hits@metadata
ranges(hits)
hits
subject(hits)
subject(as.character(hits))
as.character(subject(hits))
substring(as.character(subject(hits)), hits@start, hits@end)
substring(as.character(subject(hits)), start(ranges(hits)), end(ranges(hits)))
Q
source("go.R"); 
tbl.1
tbl.2
tbl.fimo
traceback()
hits.fwd
hits.rev
class(hits.fwd)
c(hits.fwd, hits.rev)
length(hits)
Q
source("go.R"); 
length(hits)
n
length(hits)
sequence
seq.revcomp
length(pfms)
c
c
c
c
c
c
c
c
c
c
c
c
c
c
hits
hits.fwd
hits.rev
substring(as.character(subject(hits)), start(ranges(hits)), end(ranges(hits)))
n
n
n
n
n
n
match
n
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
Q
source("go.R"); 
source("go.R"); 
source("go.R"); 
source("go.R"); 
findHits(tert.sequences$tert_mut, pfms, min.match=0.8)
tbl.fimo
source("go.R"); 
source("go.R"); 
tbl.result
xx
Q
source("go.R"); 
tbl.fimo
source("go.R"); 
tbl.1
tbl.2
source("go.R"); 
lapply(tbl.result, class)
Q
source("go.R"); 
c
as.character(lapply(tbl.1, class))
checkTrue(! "factor" %in% as.character(lapply(tbl.1, class)))
source("go.R"); 
tbl.fimo
tbl.mut
tbl.wt1
tbl.wt1
dim(tbl.wt1)
dim(tbl.wt2)
dim(tbl.wt2)
dim(tbl.wt2b)
tbl.wt2b
tbl.mut
dim(tbl.mut)
subset(tbl.mut, score > 7)
subset(tbl.mut, score > 7)$motif
source("go.R"); test.findHits()
source("go.R"); test.findHits()
source("go.R"); test.findHits()
q()
