biocGet("affy")
library("affy")
getwd()
setwd("geoExpressionData")
myData <- ReadAffy()
class(myData)
myData
?ReadAffy
slotNames("AffyBatch")
pheonData(myData)
phenoData(myData)
dir()
length(dir())
myData <- ReadAffy()
phenoData(myData)
setwd("..")
getwd()
myData <- ReadAffy(filenames=list.files("geoeExpressionData"))
getwd()
getwd()
dir()
browseVignettes("affy")
packageVersion("affy")
class(zincStudy)
eset <- justRMA()
eset <- justRMA()
list.celfiles()
eset <- just.rma(filenames = list.celfiles())
rma
length(probenames(cel.data))
length(probeNames(cel.data))
valid
is.valid
validObject(cel.data)
?ReadAffy
getwd()
tbl.pheno
phenoData(cel.data)
traceback()
biocGet(c("preprocessCore", "affyio"))
sessionInfo()
biocGet(c("preprocessCore", "affyio"))
q()
source("frd3.R")
args(trenaViz)
args(trenaViz)
source("frd3.R")
setGenome(tv, "tair10")
q()
source("frd3.R")
showGenomicRegion(tv, frd3.roi)
q()
source("frd3.R")
q()
System.sleep(4)
Sys.sleep(4)
source("frd3.R")
getGenomicRegion(tv)
length(pfms)
BSgenome.Athaliana.TAIR.TAIR9::BSgenome.Athaliana.TAIR.TAIR9::
BSgenome.Athaliana.TAIR
library(BSgenome.Athaliana.TAIR.TAIR9)
BSgenome.Athaliana.TAIR.TAIR9::BSgenome.Athaliana.TAIR.TAIR9::
BSgenome.Athaliana.TAIR.TAIR9
q()
source("frd3.R")
mm
mm
traceback()
object@genome
mm@genome
sprintf("MotifMatcher for genome %s", mm@genome)
slotNames(mm@genome)
sprintf("MotifMatcher for genome %s", mm@genome@release_name)
sprintf("MotifMatcher for genome %s", mm@genome@pkgname)
q()
